#!/bin/bash -
# Temporary init script installed in stage4 disk image.
# Once we have systemd packaged, this will be removed.

# Set up the PATH.
PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
export PATH

# Root filesystem is mounted as ro, remount it as rw.
mount -o remount,rw /

# Mount standard filesystems.
mount -t proc /proc /proc
mount -t sysfs /sys /sys
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
mkdir -p /run/lock
mkdir -p /dev/pts
mount -t devpts /dev/pts /dev/pts
mkdir -p /dev/shm
mount -t tmpfs -o mode=1777 shmfs /dev/shm

# XXX devtmpfs
#mount -t devtmpfs /dev /dev

rm -f /dev/loop*
mknod /dev/loop-control c 10 237
chown root.disk /dev/loop-control
chmod 0660 /dev/loop-control
mknod /dev/loop0 b 7 0
mknod /dev/loop1 b 7 1
mknod /dev/loop2 b 7 2
rm -f /dev/null
mknod /dev/null c 1 3
chmod 0666 /dev/null
rm -f /dev/ptmx
mknod /dev/ptmx c 5 2
chown root.tty /dev/ptmx
chmod 0666 /dev/ptmx
rm -f /dev/tty /dev/zero
mknod /dev/tty c 5 0
chown root.tty /dev/tty
chmod 0666 /dev/tty
mknod /dev/zero c 1 5
chown root.root /dev/zero
chmod 0666 /dev/zero
rm -f /dev/vd{a,b}
mknod /dev/vda b 254 0
mknod /dev/vdb b 254 16
rm -f /dev/random /dev/urandom
mknod /dev/random c 1 8
mknod /dev/urandom c 1 9
chmod 0666 /dev/random /dev/urandom

# Initialize dynamic linker cache.
ldconfig /usr/lib64 /usr/lib /lib64 /lib

# There is no hardware clock, just ensure the date is not miles out.
date `date -r /init +%m%d%H%M%Y`

# Bring up the network.
# (Note: These commands won't work unless the iproute package has been
# installed in a previous boot)
if ip -V >&/dev/null; then
    ip a add 10.0.2.15/255.255.255.0 dev eth0
    ip link set eth0 up
    ip r add default via 10.0.2.2 dev eth0
    ip a list
    ip r list
fi

# Allow telnet to work.
if test -x /usr/sbin/xinetd && test -x /usr/sbin/in.telnetd ; then
    cat > /etc/xinetd.d/telnet <<EOF
service telnet
{
        flags           = REUSE
        socket_type     = stream
        wait            = no
        user            = root
        server          = /usr/sbin/in.telnetd
	server_args     = -L /etc/login
        log_on_failure  += USERID
}
EOF
    cat > /etc/login <<EOF
#!/bin/bash -
exec bash -i -l
EOF
    chmod +x /etc/login
    xinetd -stayalive -filelog /var/log/xinetd.log
fi

hostname stage4-builder
echo stage4-builder.fedoraproject.org > /etc/hostname

echo
echo "Welcome to the Fedora/RISC-V stage4 builder"
echo

# Cleanup function called on failure or exit.
cleanup ()
{
    set +e
    # Sync disks and shut down.
    sync
    sleep 5
    sync
    mount.static -o remount,ro / >&/dev/null
    poweroff
}
trap cleanup INT QUIT TERM EXIT ERR

user=mockbuild
topdir=/builddir/build

if test ! -f /rootok; then
  set -x
  set -e

  # For dnf to reread the 'local' repo.
  dnf clean all

  # Create a 'mockbuild' user.
  useradd -d /builddir $user

  # Use a build directory which isn't root.
  #
  # Required to work around:
  # /usr/lib/rpm/debugedit: -b arg has to be either the same length as -d arg, or more than 1 char longer
  # and:
  # https://bugzilla.redhat.com/show_bug.cgi?id=757089
  # when building debuginfo.
  #
  # Also works around a cmake bug:
  # https://github.com/rwmjones/fedora-riscv/commit/68780a3e928b01f9012f5e8cd014ff636a7467b3
  su -c "mkdir $topdir" $user

  # Set _topdir to point to the build directory.
  echo "%_topdir $topdir" > /builddir/.rpmmacros

  # Install the SRPM.
  su -c "rpm -i /var/tmp/@SRPM@" $user

  # Install the package BuildRequires.  We do this first as it's the
  # step most likely to fail.
  dnf -y builddep $topdir/SPECS/@NAME@.spec

  # Pick up any updated packages since stage4 was built:
  dnf -y update --best

  # Install the basic build environment.
  dnf -y group install buildsys-build
  # XXX We need this temporarily while using hack-gcc.
  dnf -y install hack-gcc glibc-devel

  touch /rootok
else
  # On the second run, we do the actual build.
  set -x
  set -e

  # Close stdin in case build is interactive.
  exec < /dev/null

  rm -rf /rpmbuild
  mkdir -p /rpmbuild

  su -c "rpmbuild -ba $topdir/SPECS/@NAME@.spec \
           --define \"debug_package %{nil}\" \
           --undefine _annotated_build \
           --define \"_missing_doc_files_terminate_build %{nil}\" \
           --define \"_emacs_sitestartdir /usr/share/emacs/site-lisp/site-start.d\" \
           --define \"_emacs_sitelispdir /usr/share/emacs/site-lisp\" \
           --nocheck \
  " $user

  touch /buildok
fi

# cleanup() is called automatically here.
