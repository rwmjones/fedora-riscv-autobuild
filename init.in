#!/bin/bash -
# Temporary init script installed in stage4 disk image.
# Once we have systemd packaged, this will be removed.

# Set up the PATH.
PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
export PATH

# Root filesystem is mounted as ro, remount it as rw.
mount -o remount,rw /

# Mount standard filesystems.
mount -t proc /proc /proc
mount -t sysfs /sys /sys
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
mkdir -p /run/lock
mkdir -p /dev/pts
mount -t devpts /dev/pts /dev/pts
mkdir -p /dev/shm
mount -t tmpfs -o mode=1777 shmfs /dev/shm

# XXX devtmpfs
#mount -t devtmpfs /dev /dev

rm -f /dev/loop*
mknod /dev/loop-control c 10 237
mknod /dev/loop0 b 7 0
mknod /dev/loop1 b 7 1
mknod /dev/loop2 b 7 2
rm -f /dev/null
mknod /dev/null c 1 3
rm -f /dev/ptmx
mknod /dev/ptmx c 5 2
rm -f /dev/tty /dev/zero
mknod /dev/tty c 5 0
mknod /dev/zero c 1 5
rm -f /dev/vd{a,b}
mknod /dev/vda b 254 0
mknod /dev/vdb b 254 16
rm -f /dev/random /dev/urandom
mknod /dev/random c 1 8
mknod /dev/urandom c 1 9

# Initialize dynamic linker cache.
ldconfig /usr/lib64 /usr/lib /lib64 /lib

# There is no hardware clock, just ensure the date is not miles out.
date `date -r /init +%m%d%H%M%Y`

# Bring up the network.
# (Note: These commands won't work unless the iproute package has been
# installed in a previous boot)
if ip -V >&/dev/null; then
    ip a add 10.0.2.15/255.255.255.0 dev eth0
    ip link set eth0 up
    ip r add default via 10.0.2.2 dev eth0
    ip a list
    ip r list
fi

# Allow telnet to work.
if test -x /usr/sbin/xinetd && test -x /usr/sbin/in.telnetd ; then
    cat > /etc/xinetd.d/telnet <<EOF
service telnet
{
        flags           = REUSE
        socket_type     = stream
        wait            = no
        user            = root
        server          = /usr/sbin/in.telnetd
	server_args     = -L /etc/login
        log_on_failure  += USERID
}
EOF
    cat > /etc/login <<EOF
#!/bin/bash -
exec bash -i -l
EOF
    chmod +x /etc/login
    xinetd -stayalive -filelog /var/log/xinetd.log
fi

hostname stage4-builder
echo stage4-builder.fedoraproject.org > /etc/hostname

echo
echo "Welcome to the Fedora/RISC-V stage4 builder"
echo

# Cleanup function called on failure or exit.
cleanup ()
{
    set +e
    # Sync disks and shut down.
    sync
    sleep 5
    sync
    mount.static -o remount,ro / >&/dev/null
    poweroff
}
trap cleanup INT QUIT TERM EXIT ERR

if test ! -f /rootok; then
  set -x
  set -e

  rm -f /etc/yum.repos.d/fedora*.repo
  tdnf="tdnf --releasever f27"
  $tdnf repolist
  $tdnf clean all
  $tdnf makecache
  $tdnf -y update --best --allowerasing
  rm -f /etc/yum.repos.d/fedora*.repo
  # See also buildsys-build in comps.xml
  # missing:
  # fedora-release
  # gcc
  # shadow-utils
  $tdnf -y install \
    bash \
    bzip2 \
    coreutils \
    cpio \
    diffutils \
    elfutils \
    findutils \
    gawk \
    glibc-headers \
    grep \
    gzip \
    info \
    make \
    patch \
    redhat-rpm-config \
    rpm-build \
    sed \
    tar \
    unzip \
    util-linux \
    which \
    xz
  rm -f /etc/yum.repos.d/fedora*.repo
  if [ "$(cat /var/tmp/provides)" != "" ]; then
      $tdnf -y install $(cat /var/tmp/provides)
  fi
  rm -f /etc/yum.repos.d/fedora*.repo

  touch /rootok
else
  # On the second run, we do the actual build.
  set -x
  set -e

  rm -rf /rpmbuild
  mkdir -p /rpmbuild

  rpmbuild --rebuild /var/tmp/@SRPM@ \
           --define "debug_package %{nil}" \
           --undefine _annotated_build \
           --define "_topdir /rpmbuild" \
           --define "_missing_doc_files_terminate_build %{nil}" \
           --define "_unitdir /usr/lib/systemd/system" \
           --define "_sysctldir /usr/lib/sysctl.d" \
           --define "_tmpfilesdir /usr/lib/tmpfiles.d" \
           --define "_udevrulesdir /usr/lib/udev/rules.d" \
           --define "_emacs_sitestartdir /usr/share/emacs/site-lisp/site-start.d" \
           --define "_emacs_sitelispdir /usr/share/emacs/site-lisp" \
           --nodeps \
           --nocheck

  touch /buildok
fi

# cleanup() is called automatically here.
