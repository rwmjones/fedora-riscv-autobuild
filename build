#!/bin/bash -
# Copyright (C) 2016-2018 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

source config

set -e

# Run one build.

srpm="$1"
basename="$(basename $1)"
name="$(rpm -q --qf '%{NAME}\n' -p $srpm)"

# Log files go here.
mkdir -p $ROOT/logs/$basename
rm -f $ROOT/logs/$basename/*
exec >& $ROOT/logs/$basename/script.log

result ()
{
    echo "$@" >> $ROOT/autobuild-status.html
}

# Create a temporary directory for the build, and ensure it is always
# cleaned up after.
tmpdir="$(mktemp -d $ROOT/tmp/$name.XXXXXX)"
cleanup ()
{
    r=$?
    rm -rf $tmpdir ||:
    exit $r
}
trap cleanup INT QUIT TERM EXIT ERR

# Move the SRPM into tmpdir.  Also prevents it from being picked up
# again by the autobuild script.
mv $srpm $tmpdir/

# Short-circuit noarch RPMs.  We can just download them.
if rpm -qip "$tmpdir/$basename" | grep -sq '^Architecture: noarch$'; then
    pushd $tmpdir
    koji -q download-build `echo "$basename" | sed s/.src.rpm//`
    mv *.noarch.rpm $ROOT/RPMS/noarch/
    mv *.src.rpm $ROOT/SRPMS/
    popd
    ./push
    exit 0
fi

# TDNF ONLY
# Get the list of BR source package names.
dnf provides `rpm -qRp $tmpdir/$basename` |
    grep -vE "^(Last|Repo|Matched|Provide|Filename)[[:space:]]" |
    grep -v "^ " |
    grep -v "^$" |
    awk '{print $1}' |
    sed 's/-[0-9].*//' |
    grep -v coreutils-single |
    grep -v '^gcc$' |
    grep -v '^gcc-c++$' |
    sort -u > $tmpdir/provides

# Copy stage4-disk.img into the tmpdir.
cp $ROOT/stage4-disk.img $tmpdir/$name-disk.img

# Copy the init file and modify it.
sed -e "s,@SRPM@,$basename,g" < init.in > $tmpdir/$name-init.sh

# Copy the local repo file and modify it.
sed -e "s,@WEBSERVER@,$WEBSERVER,g" < local.repo.in > $tmpdir/local.repo

# Copy in the init script and SRPM.
guestfish -a $tmpdir/$name-disk.img -i <<EOF
    upload $tmpdir/$name-init.sh /init
    chmod 0755 /init
    upload $tmpdir/$basename /var/tmp/$basename
    upload $tmpdir/provides /var/tmp/provides
    mkdir-p /etc/yum.repos.d
# We need to remove these for tdnf since it will try to use them.
    glob rm /etc/yum.repos.d/*.repo
    upload $tmpdir/local.repo /etc/yum.repos.d/local.repo
EOF

# Boot first time to set up the root.
qemu-system-riscv64 \
    -nographic -machine virt $QEMU_EXTRA -m $QEMU_MEMORY \
    -kernel $ROOT/bbl \
    -append "console=ttyS0 ro root=/dev/vda init=/init" \
    -drive file=$tmpdir/$name-disk.img,format=raw,if=none,id=hd0 \
    -device virtio-blk-device,drive=hd0 \
    -device virtio-net-device,netdev=usernet \
    -netdev user,id=usernet >& $ROOT/logs/$basename/root.log

# Did the root get set up correctly?
if ! guestfish --ro -a $tmpdir/$name-disk.img -i stat /rootok; then
    result "<span style='color:red;'><b>FAIL</b></span>: $basename <a href=logs/$basename/root.log>root.log</a> <br/>"
    ./upload logs status
    exit 1
fi

# Boot second time to perform the build.
qemu-system-riscv64 \
    -nographic -machine virt $QEMU_EXTRA -m $QEMU_MEMORY \
    -kernel $ROOT/bbl \
    -append "console=ttyS0 ro root=/dev/vda init=/init" \
    -drive file=$tmpdir/$name-disk.img,format=raw,if=none,id=hd0 \
    -device virtio-blk-device,drive=hd0 \
    -device virtio-net-device,netdev=usernet \
    -netdev user,id=usernet >& $ROOT/logs/$basename/build.log

# Did the build work?
if ! guestfish --ro -a $tmpdir/$name-disk.img -i stat /buildok; then
    result "<span style='color:red;'><b>FAIL</b></span>: $basename <a href=logs/$basename/root.log>root.log</a> <a href=logs/$basename/build.log>build.log</a> <br/>"
    ./upload logs status
    exit 1
fi

result "<span style='color:green;'><b>SUCCESS:</b></span> $basename <a href=logs/$basename/root.log>root.log</a> <a href=logs/$basename/build.log>build.log</a> <br/>"

# If successful, copy out the generated RPMs.
virt-copy-out -a $tmpdir/$name-disk.img /rpmbuild $tmpdir/

cp $tmpdir/$basename $ROOT/SRPMS/
cp $tmpdir/rpmbuild/RPMS/noarch/*.noarch.rpm $ROOT/RPMS/noarch/ ||:
cp $tmpdir/rpmbuild/RPMS/riscv64/*.riscv64.rpm $ROOT/RPMS/riscv64/ ||:

./push
./upload srpms rpms repodata logs status
